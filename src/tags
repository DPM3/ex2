!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BMPImg	./BMPImg.cpp	/^BMPImg::BMPImg(int width, int height) $/;"	f	class:BMPImg
BMPImg	./BMPImg.cpp	/^BMPImg::BMPImg(std::string const& path) : BMPImg{} {$/;"	f	class:BMPImg
BMPImg	./BMPImg.h	/^class BMPImg {$/;"	c
BMPImg.cpp	./BMPImg.cpp	1;"	F
BMPImg.h	./BMPImg.h	1;"	F
BMPImg::BMPImg	./BMPImg.cpp	/^BMPImg::BMPImg(int width, int height) $/;"	f	class:BMPImg
BMPImg::BMPImg	./BMPImg.cpp	/^BMPImg::BMPImg(std::string const& path) : BMPImg{} {$/;"	f	class:BMPImg
BMPImg::Loader	./BMPImg.cpp	/^struct BMPImg::Loader {$/;"	s	class:BMPImg	file:
BMPImg::Loader::BadFile	./BMPImg.cpp	/^	class BadFile { };$/;"	c	struct:BMPImg::Loader	file:
BMPImg::Loader::CorruptBMPFile	./BMPImg.cpp	/^	class CorruptBMPFile { };$/;"	c	struct:BMPImg::Loader	file:
BMPImg::Loader::loadFile	./BMPImg.cpp	/^	static std::string loadFile(std::string const& path) {$/;"	f	struct:BMPImg::Loader
BMPImg::Loader::parseColPlt	./BMPImg.cpp	/^	static std::vector<Color> parseColPlt(const byte* content, int pltSize) {$/;"	f	struct:BMPImg::Loader
BMPImg::Loader::parseDIBHeader	./BMPImg.cpp	/^	static void parseDIBHeader(const byte* content, int *bmapWidth, int *bmapHeight,$/;"	f	struct:BMPImg::Loader
BMPImg::Loader::parseHeader	./BMPImg.cpp	/^	static void parseHeader(const byte* content, int *fileSize, int *pixelArrOffset) {$/;"	f	struct:BMPImg::Loader
BMPImg::Loader::parsePixelArr24	./BMPImg.cpp	/^	static std::vector<Color> parsePixelArr24(const byte* content, int width, int height) {$/;"	f	struct:BMPImg::Loader
BMPImg::Loader::parsePixelArr8	./BMPImg.cpp	/^	static std::vector<byte> parsePixelArr8(const byte* content, int width, int height) {$/;"	f	struct:BMPImg::Loader
BMPImg::Loader::readVar	./BMPImg.cpp	/^	static T readVar(const byte* *content) {$/;"	f	struct:BMPImg::Loader
BMPImg::Writer	./BMPImg.cpp	/^struct BMPImg::Writer {$/;"	s	class:BMPImg	file:
BMPImg::Writer::encodeDIBHeader	./BMPImg.cpp	/^	static std::string encodeDIBHeader(short bits4pixel, int width, int height) {$/;"	f	struct:BMPImg::Writer
BMPImg::Writer::encodeHeader	./BMPImg.cpp	/^	static std::string encodeHeader(int fileSize, int pixelArrOffset) {$/;"	f	struct:BMPImg::Writer
BMPImg::Writer::encodePixelArr	./BMPImg.cpp	/^	static std::string encodePixelArr(std::vector<Color> pixels, int width) {$/;"	f	struct:BMPImg::Writer
BMPImg::Writer::writeToFile	./BMPImg.cpp	/^	static void writeToFile(std::string const& path, std::string const& content) {$/;"	f	struct:BMPImg::Writer
BMPImg::Writer::writeVar	./BMPImg.cpp	/^	static void writeVar(std::string* s, T t) {$/;"	f	struct:BMPImg::Writer
BMPImg::byte	./BMPImg.h	/^	typedef unsigned char byte;$/;"	t	class:BMPImg
BMPImg::height	./BMPImg.cpp	/^int BMPImg::height() {$/;"	f	class:BMPImg
BMPImg::load	./BMPImg.cpp	/^void BMPImg::load(std::string const& path) {$/;"	f	class:BMPImg
BMPImg::m_data	./BMPImg.h	/^	std::vector<Color> m_data;$/;"	m	class:BMPImg
BMPImg::m_height	./BMPImg.h	/^	int m_width, m_height;$/;"	m	class:BMPImg
BMPImg::m_width	./BMPImg.h	/^	int m_width, m_height;$/;"	m	class:BMPImg
BMPImg::operator ()	./BMPImg.cpp	/^Color& BMPImg::operator() (int i, int j) {$/;"	f	class:BMPImg
BMPImg::save	./BMPImg.cpp	/^void BMPImg::save(std::string const& path) {$/;"	f	class:BMPImg
BMPImg::width	./BMPImg.cpp	/^int BMPImg::width() {$/;"	f	class:BMPImg
BadFile	./BMPImg.cpp	/^	class BadFile { };$/;"	c	struct:BMPImg::Loader	file:
CPMatrix	./Matrix.h	/^typedef const struct Matrix* CPMatrix;$/;"	t	typeref:struct:Matrix
Color	./Color.cpp	/^Color::Color(component_t r, component_t g, component_t b)$/;"	f	class:Color
Color	./Color.h	/^class Color {$/;"	c
Color.cpp	./Color.cpp	1;"	F
Color.h	./Color.h	1;"	F
Color::Color	./Color.cpp	/^Color::Color(component_t r, component_t g, component_t b)$/;"	f	class:Color
Color::b	./Color.cpp	/^Color::component_t& Color::b() {$/;"	f	class:Color
Color::brightness	./Color.cpp	/^Color::component_t Color::brightness() {$/;"	f	class:Color
Color::component_t	./Color.h	/^	typedef unsigned char component_t;$/;"	t	class:Color
Color::g	./Color.cpp	/^Color::component_t& Color::g() {$/;"	f	class:Color
Color::m_b	./Color.h	/^	component_t m_r, m_g, m_b;$/;"	m	class:Color
Color::m_g	./Color.h	/^	component_t m_r, m_g, m_b;$/;"	m	class:Color
Color::m_r	./Color.h	/^	component_t m_r, m_g, m_b;$/;"	m	class:Color
Color::r	./Color.cpp	/^Color::component_t& Color::r() {$/;"	f	class:Color
CorruptBMPFile	./BMPImg.cpp	/^	class CorruptBMPFile { };$/;"	c	struct:BMPImg::Loader	file:
ERROR_FAILURE	./ErrorCode.h	/^	ERROR_FAILURE,$/;"	e	enum:__anon1
ERROR_MATRIX_SIZE	./ErrorCode.h	/^	ERROR_MATRIX_SIZE$/;"	e	enum:__anon1
ERROR_NO_MEMORY	./ErrorCode.h	/^	ERROR_NO_MEMORY,$/;"	e	enum:__anon1
ERROR_SUCCESS	./ErrorCode.h	/^    ERROR_SUCCESS = 0,$/;"	e	enum:__anon1
ErrorCode	./ErrorCode.h	/^} ErrorCode;$/;"	t	typeref:enum:__anon1
ErrorCode.h	./ErrorCode.h	1;"	F
Loader	./BMPImg.cpp	/^struct BMPImg::Loader {$/;"	s	class:BMPImg	file:
Matrix.h	./Matrix.h	1;"	F
PMatrix	./Matrix.h	/^typedef struct Matrix* PMatrix;$/;"	t	typeref:struct:Matrix
Writer	./BMPImg.cpp	/^struct BMPImg::Writer {$/;"	s	class:BMPImg	file:
b	./Color.cpp	/^Color::component_t& Color::b() {$/;"	f	class:Color
bmp	./bmp_tester.cpp	/^namespace bmp {$/;"	n	namespace:testing	file:
bmp_tester.cpp	./bmp_tester.cpp	1;"	F
brightness	./Color.cpp	/^Color::component_t Color::brightness() {$/;"	f	class:Color
byte	./BMPImg.h	/^	typedef unsigned char byte;$/;"	t	class:BMPImg
component_t	./Color.h	/^	typedef unsigned char component_t;$/;"	t	class:Color
convert_to_grayscale	./bmp_tester.cpp	/^void convert_to_grayscale(const std::string& imagePath,$/;"	f	namespace:testing::bmp
encodeDIBHeader	./BMPImg.cpp	/^	static std::string encodeDIBHeader(short bits4pixel, int width, int height) {$/;"	f	struct:BMPImg::Writer
encodeHeader	./BMPImg.cpp	/^	static std::string encodeHeader(int fileSize, int pixelArrOffset) {$/;"	f	struct:BMPImg::Writer
encodePixelArr	./BMPImg.cpp	/^	static std::string encodePixelArr(std::vector<Color> pixels, int width) {$/;"	f	struct:BMPImg::Writer
file_reading.cpp	./file_reading.cpp	1;"	F
g	./Color.cpp	/^Color::component_t& Color::g() {$/;"	f	class:Color
height	./BMPImg.cpp	/^int BMPImg::height() {$/;"	f	class:BMPImg
load	./BMPImg.cpp	/^void BMPImg::load(std::string const& path) {$/;"	f	class:BMPImg
loadFile	./BMPImg.cpp	/^	static std::string loadFile(std::string const& path) {$/;"	f	struct:BMPImg::Loader
m_b	./Color.h	/^	component_t m_r, m_g, m_b;$/;"	m	class:Color
m_data	./BMPImg.cpp	/^	: m_width{width}, m_height{height}, m_data(width * height) { }$/;"	f
m_data	./BMPImg.h	/^	std::vector<Color> m_data;$/;"	m	class:BMPImg
m_g	./Color.h	/^	component_t m_r, m_g, m_b;$/;"	m	class:Color
m_height	./BMPImg.h	/^	int m_width, m_height;$/;"	m	class:BMPImg
m_r	./Color.h	/^	component_t m_r, m_g, m_b;$/;"	m	class:Color
m_width	./BMPImg.h	/^	int m_width, m_height;$/;"	m	class:BMPImg
main	./myTest.cpp	/^int main() {$/;"	f
myTest.cpp	./myTest.cpp	1;"	F
operator ()	./BMPImg.cpp	/^Color& BMPImg::operator() (int i, int j) {$/;"	f	class:BMPImg
parseColPlt	./BMPImg.cpp	/^	static std::vector<Color> parseColPlt(const byte* content, int pltSize) {$/;"	f	struct:BMPImg::Loader
parseDIBHeader	./BMPImg.cpp	/^	static void parseDIBHeader(const byte* content, int *bmapWidth, int *bmapHeight,$/;"	f	struct:BMPImg::Loader
parseHeader	./BMPImg.cpp	/^	static void parseHeader(const byte* content, int *fileSize, int *pixelArrOffset) {$/;"	f	struct:BMPImg::Loader
parsePixelArr24	./BMPImg.cpp	/^	static std::vector<Color> parsePixelArr24(const byte* content, int width, int height) {$/;"	f	struct:BMPImg::Loader
parsePixelArr8	./BMPImg.cpp	/^	static std::vector<byte> parsePixelArr8(const byte* content, int width, int height) {$/;"	f	struct:BMPImg::Loader
r	./Color.cpp	/^Color::component_t& Color::r() {$/;"	f	class:Color
readFileContent	./file_reading.cpp	/^std::string readFileContent(const std::string& filePath) {$/;"	f
readVar	./BMPImg.cpp	/^	static T readVar(const byte* *content) {$/;"	f	struct:BMPImg::Loader
rotate_image	./bmp_tester.cpp	/^void rotate_image(const std::string& imagePath, const std::string& outputPath) {$/;"	f	namespace:testing::bmp
save	./BMPImg.cpp	/^void BMPImg::save(std::string const& path) {$/;"	f	class:BMPImg
testing	./bmp_tester.cpp	/^namespace testing {$/;"	n	file:
testing::bmp	./bmp_tester.cpp	/^namespace bmp {$/;"	n	namespace:testing	file:
testing::bmp::convert_to_grayscale	./bmp_tester.cpp	/^void convert_to_grayscale(const std::string& imagePath,$/;"	f	namespace:testing::bmp
testing::bmp::rotate_image	./bmp_tester.cpp	/^void rotate_image(const std::string& imagePath, const std::string& outputPath) {$/;"	f	namespace:testing::bmp
width	./BMPImg.cpp	/^int BMPImg::width() {$/;"	f	class:BMPImg
writeFileContent	./file_reading.cpp	/^void writeFileContent(const std::string& filePath, const std::string& content) {$/;"	f
writeToFile	./BMPImg.cpp	/^	static void writeToFile(std::string const& path, std::string const& content) {$/;"	f	struct:BMPImg::Writer
writeVar	./BMPImg.cpp	/^	static void writeVar(std::string* s, T t) {$/;"	f	struct:BMPImg::Writer
